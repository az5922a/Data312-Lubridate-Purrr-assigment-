---
title: "dplyr Part 2 - hands-on exercise"
author: "Josemari Feliciano"
format: html
editor: visual
---

# Part I: dplyr verbs

## Note:

This is a continuation of the dplyr hands-on lab.

Last week, we went over: **filter(), select(), arrange().**

## Load package and data we will need

Variable documentation for flights if you need it again: <https://nycflights13.tidyverse.org/reference/flights.html>

```{r}
# load the packages we need
library(tidyverse) 
library(nycflights13)

# load the flights built-in dataset from nycflights13 into the R env't
data("flights")

# print six rows of flights
head(flights)
```

## rename() verb to change variable name

rename() is an excellent function or verb to rename your variables. It follows a simple format: rename(new_name = old_name), where new_name represents the new variable name and old_name represents the previous variable name

Example 1: The example below changes the name of dep_time into departure_time

```{r}
flights |> 
  rename(departure_time = dep_time) 
```

Example 2: The example below changes the name of multiple variables

```{r}
flights |> 
  rename(departure_time = dep_time, flight_year = year) 
```

## Practice #1 (2 mins practice)

Using the rename() verb, print flights after renaming: month into flight_month, day into flight_date, and year into flight_year

```{r}
# Fill in your solution below:

```

## relocate() verb to move variables to the left-most columns

relocate() allows you to move variables to the left-most columns of the data frame. Often when you share data, certain columns are more important to data receivers, so you typically move those important columns to the left-most columns. You simply feed the name of the variable(s) you want to highlight as arguments inside relocate()

Here is an example where you move both **time_hour** and **air_time** to the left-most columns:

```{r}
flights |> 
  relocate(time_hour, air_time)
```

## distinct() verb for uniqueness: Case 1

**Case 1 use of distinct():** Finding Unique Value of one particular variable

Let us go back to the **flights** data.

Suppose you want to know the unique values for **dist** (destination airports). Then we can feed **dest** inside distinct() to instruct R to print the unique values for **dest**.

```{r}
flights |> 
  distinct(dest)
```

If you are interested in arranging data alphabetically, you may use arrange()

```{r}
# Let us fill this in as a class
flights |> 
  distinct(dest) |>
  arrange(dest)
```

## distinct() verb for uniqueness: Case 2

Here is an example below where we want to print out the unique combinations of multiple variables. In this example, let us see unique combination of: origin and destination airports, and then arranging the date alphabetically:

```{r}
flights |> 
  distinct(origin, dest) %>%
  arrange(origin, dest)
```

## count() verb for uniqueness

The count verb is similar to distinct() that it helps you print out unique contents of a variable or unique combinations of multiple variables. But the difference is that it will print out the unique contents with their respective counts:

```{r}
flights |> 
  count(dest)
```

This one prints the unique combination of two variables we inputted with their respective counts:

```{r}
flights |> 
  count(origin, dest) 
```

## Practice #2 (2 mins practice)

Load **starwars**, a built-in dataset from tidyverse, into you R environment.

Using either distinct() or counts(), also print the unique combinations of **homeworld** and **species** variables from **starwars**

```{r}
# Fill in your solution below:

```

## summarize() verb - Creating overall summaries across categorical variables

This verb allows you to create summaries of your data. This allows you to create basic summaries across categorical groupings. *I contend that this is the most powerful verb of the dplyr package.*

Note:`summarise()` is equivalent to `summarize()`.

General structure of summarize() verb:

some_data \|\>

group_by(**categorical_variable(s)**) \|\>

summarize(**you_name_this** = **some_summary_function**(**variable1**))

Let us focus on **some_summary_function.** Here are summary functions that are commonly used:

| General Tasks      | Common Summary Function                          |
|--------------------|--------------------------------------------------|
| Central Tendencies | `mean() for average/mean`, `median() for median` |
| Position           | `first()`, `last()`                              |
| Range              | `min()`, `max()`                                 |
| Count              | `n()`, `n_distinct()`                            |
| Spread             | `sd()`, `IQR()`                                  |
| Sum                | sum()                                            |

**Let us run a real world example:** Suppose we want to calculate the *average/mean* **dep_delay** (departure delay) from the **flights** data**,** broken down by **carrier**. Let us call the variable for the mean dep_delay as **mean_dep_delay** (again, if you name data, make sure to name it something meaningful).

Quick reminder:

some_data \|\>

group_by(**categorical_variable(s)**) \|\>

summarize(**you_name_this** = **some_summary_function**(**variable1**))

Let us modify the code above to perform our task.

**Quick Note:** For mean(), median(), min(), and max(), it is good practice to feed **na.rm = TRUE** as the second argument. Explanation: If your contains missing data (NA in R), mean() and median() will return NA.

Suppose we are interested in breaking down the mean (or average) **dep_delay** by air line carrier (**carrier**):

```{r}
# Let us fill this in together
flights |>
  group_by(carrier) |>
  summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE))

```

You can tell R to create multiple summaries at the same time. Below is an example where you ask R to calculate the mean departure delay, maximum departure delay, the minimum departure delay, and number of data rows by using n():

```{r}
flights |>
  group_by(carrier) |>
  summarize(mean_dep_delay = mean(dep_delay, na.rm = T),
            max_dep_delay = max(dep_delay, na.rm = T),
            min_dep_delay = min(dep_delay, na.rm = T),
            number_data_rows = n()) # n will print the number of data rows by carrier
```

## Practice 3 (4 mins practice)

## Practice #3a 

Using the **flights** data, calculate the median departure delay broken down by the **origin** airport:

```{r}
# Type in your script below:

```

## Practice #3b

Using the **starwars** data you loaded earlier in Practice #3, calculate the mean **mass** broken down by **species** and **gender** (you will have two variables separated by a comma inside the group_by statement this time):

```{r}
# Type in your script below:

```

## summarize() verb - Without a group_by statement (overall summary)

summarize() verb without a group by statement (e.g., group_by(categorical_data)) simply creates the overall summary. Here is a modified example we ran early but removes the group by statement:

```{r}
flights |>
  summarize(mean_dep_delay = mean(dep_delay, na.rm = T),
            max_dep_delay = max(dep_delay, na.rm = T),
            min_dep_delay = min(dep_delay, na.rm = T),
            number_data_rows = n(), # n gets you the number or data rows
            number_unique_planes = n_distinct(tailnum)) # n_distinct(tailnum) gets you the number of distinct tailnum 
```

## Practice #4 (2 min practice)

Using the **starwars** data you loaded earlier in Practice #3, calculate the overall mean **mass** and **height** for the entire dataset:

```{r}
# Type in your script below:

```

## mutate() verb - Create new variables using data from preexisting variables

The job of this verb is to add new columns that are calculated from the existing columns.

For this demonstration, let us load the gadget_sales data into the R environment using data I made and saved in my Github account:

```{r}
gadget_sales <- read.csv("https://raw.githubusercontent.com/jmtfeliciano/teachingdata/refs/heads/main/three_month_sales_data.csv")
gadget_sales
```

In general, mutate() will follow the following format:

mutate(new_variable_name = *math using variable names*)

Suppose we want to add **OctoberSales, NovemberSales,** and **DecemberSales** into a column we will call **Q1Sales**, then we need to run the following script:

```{r}
gadget_sales %>%
  mutate(Q1Sales = OctoberSales + NovemberSales + DecemberSales)
```

As a class, let us modify the script above so we may save the data as **gadget_sales_v2** into the R env't. After creating gadget_sales_v2, use head() to print a sample data.

```{r}
# Type in your script as a class

```

## Practice #5 (2 mins practice)

Using **gadget_sales_v2,** use summarize() with sum() to calculate the overall total **Q1Sales.** Name this sum as **overall_Q1Sales**

```{r}
# Type in your script below:

```

## Practice #6 (2 mins practice)

First load this script that will load a csv file from github into your R env't as fy_investments:

```{r}
fy_investments <- read.csv("https://raw.githubusercontent.com/jmtfeliciano/teachingdata/refs/heads/main/fiscal_year_investment.csv")
fy_investments
```

Next, create a column called **YearTotal** by adding Q1, Q2, Q3, and Q4 using mutate(). Make sure to save this new data frame into the R environment as **fy_investments_v2.** Afterwards, run **head(fy_investments_v2)**

```{r}
# Type in your script below:

```

## mutate() verb - dichotomy of numerical variable into binary variable (dummy variables)

In data analysis, particularly in public health and medicine, we often breakdown numerical variables into binary variables (0/1, yes/no). We often refer to this as creating **dummy variables** we use for data analysis.

We know from whenever dep_delay is negative, the flight actually departed early.

Suppose we want to create a dummy variable called **departed_early** with values "yes" if dep_delay is negative, otherwise, the value is "no", then below is an example on how you may leverage the ifelse() statement below:

```{r}
flights |>
  mutate(departed_early = ifelse(dep_delay < 0, "Yes", "No")) |>
  relocate(departed_early) 
# remember, relocate moves variable you specify to the left most corner;
```

## Practice #7 (2 mins practice)

Using the **flights** data**,** create a dummy variable called **departed_super_late**. Using ifelse(), assign a value of 1 if dep_delay is greater than 60. Otherwise, assign a value of 0.

```{r}
# Type in your script below:

```

# Part II: File Reading and more dplyr practice

## Follow the recommended (best practice) set up and next steps

For this exercise, try the best practice (recommended) set up in slides 9-11 of <https://jmtfeliciano.github.io/DATA312Spring2025/Data312Spring2025_Lecture4#9>

Before doing the tasks below, please ensure the following:

1.  Save this Data312Exercise.qmd document within a folder with minimal files.
2.  Within the folder where Exercise5.qmd resides, create a 'data' folder.
3.  Go to canvas and download the following files from Home \> Week 4:
    1.  drug_abandonment.csv
    2.  storms.rds
    3.  penguins.xlsx
    4.  students.xlsx
4.  Save the four files inside the 'data' folder
5.  Complete the tasks below

## Load packages you will need

Load the following packages: (1) tidyverse, (2) readxl.

```{r}
# Place your code below

```

## Practice 8: Load three of the four files

Load the following files into your R environment:

1.  drug_abandonment.csv — Note: please load into your R env't as abandoned_data
2.  storms.rds — Note: please load into your R env't as storms_data
3.  students.xlsx — Note: please load into your R env't as students_data

After you load all three data into your R environment, use head() for each data to print sample data. You may create additional R chunks below if desired.

```{r}
# Place your code below

```

## Practice 9: abandoned_data

Create a data subset of **abandoned_data** where the number of other medications the patient has to pick up is 0. Save this data as **no_other_medication** into your R environment. Then, using **no_other_medication,** create a csv file named **unique_medication.csv**

Please see slide 4 of <https://github.com/jmtfeliciano/CountDataModels/blob/master/slides1.pdf> for variable documentation.

```{r}
# Place your code below

```

## Practice 10: Load penguins.xlsx (if extra time)

Load the Dream Island sheet from penguins.xlsx into your R environment as **dream_island_penguins**

Also use head() to print sample data from this new data you created.

Then, write a script that counts the numbers of female penguins in 2009. Also report the median flipper length for these 2009 female penguins.

```{r}
# Place your script(s) below:

```

## Practice 11: Analyzing (part 1, erroneous) (if extra time)

Using **dream_island_penguins,** create a box plot where x = year, y = bill_length_mm.

This will look wrong which we will fix in Task 7. What could be the issue (hint: data types)? **Note:** the year variable contains 2007-2009 data.

```{r}
# Place your script(s) below:

```

## Practice 12: Analyzing (part 2, correcting Practice 11) (if extra time)

This time, copy your code from Task 6 into the code chunk below. However, this time, use x = as.character(year) instead.

Context: Since R expects one categorical variable to create a boxplot, you will need to make year, which is a numeric variable, into a string or character type. This concept of forcing year, a numeric variable, into character/string type is known as ***explicit coercion.***

```{r}
# Place your script(s) below:

```
